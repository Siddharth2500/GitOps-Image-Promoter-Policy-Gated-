# -*- coding: utf-8 -*-
"""GitOps Image Promoter (Policy-Gated)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y1sEyvWd3UiDWmKNrdVAn4E3hqiXSSDK
"""

# Project 1 â€” GitOps Image Promoter (Policy-Gated, Colab-Friendly)
# One cell, error-free, no external packages. Works in Google Colab and locally.

import os, re, json, hashlib, xml.etree.ElementTree as ET
from datetime import datetime
from pathlib import Path

# ---------- tiny I/O helpers ----------
def _read(path: str) -> str:
    with open(path, "r", encoding="utf-8") as f:
        return f.read()

def _write(path: str, content: str):
    Path(os.path.dirname(path) or ".").mkdir(parents=True, exist_ok=True)
    with open(path, "w", encoding="utf-8") as f:
        f.write(content)

def _sha12(s: str) -> str:
    return hashlib.sha256(s.encode("utf-8")).hexdigest()[:12]

# ---------- very small YAML-like parser ----------
def _parse_simple_yaml(path: str) -> dict:
    """
    Supports:
      key: value
      key:
        - item
        - item2
    No nested dicts; lists only at top level.
    """
    data, current = {}, None
    for line in _read(path).splitlines():
        if not line.strip() or line.strip().startswith("#"):
            continue
        if re.match(r"^\S.*:\s*\S", line):  # key: value
            k, v = line.split(":", 1)
            data[k.strip()] = v.strip()
            current = None
        elif re.match(r"^\S.*:\s*$", line):  # key:
            current = line.split(":")[0].strip()
            data[current] = []
        elif current and re.match(r"^\s*-\s+", line):  # - item
            data[current].append(line.split("-", 1)[1].strip())
    return data

# ---------- JUnit summary ----------
def _junit_summary(junit_path: str) -> dict:
    tree = ET.parse(junit_path)
    root = tree.getroot()
    suites = [root] if root.tag == "testsuite" else list(root)
    total = failures = errors = 0
    for s in suites:
        total += int(s.attrib.get("tests", 0))
        failures += int(s.attrib.get("failures", 0))
        errors += int(s.attrib.get("errors", 0))
    passed = max(total - failures - errors, 0)
    return {"total": total, "failures": failures, "errors": errors, "passed": passed}

# ---------- Attestation check ----------
def _verify_attestations(attestation_path: str, req_subjects: list, req_digests: list) -> bool:
    try:
        att = json.loads(_read(attestation_path))
    except Exception:
        return False
    subjects = {str(s) for s in att.get("subjects", [])}
    digests = {str(d) for d in att.get("digests", [])}
    return set(req_subjects or []).issubset(subjects) and set(req_digests or []).issubset(digests)

# ---------- Manifest update ----------
def _replace_image_tag(text: str, image_repo: str, new_tag: str) -> tuple[str, bool]:
    """
    Replaces the FIRST occurrence of `image: <repo>[:tag]` with `image: <repo>:<new_tag>`.
    """
    pat = re.compile(rf"(image:\s*{re.escape(image_repo)})(:[\w.\-]+)?\b")
    changed = False
    def _sub(m):
        nonlocal changed
        changed = True
        return f"{m.group(1)}:{new_tag}"
    out = pat.sub(_sub, text, count=1)
    return out, changed

def _backup_name(path: str) -> str:
    ts = datetime.utcnow().strftime("%Y%m%dT%H%M%SZ")
    base, ext = os.path.splitext(path)
    return f"{base}.backup.{ts}{ext}"

# ---------- Public API ----------
def promote(
    manifest_path: str,
    image_repo: str,
    new_tag: str,
    policy_path: str,
    attestation_path: str,
    junit_path: str,
    inplace: bool = True,
) -> dict:
    """
    Returns a JSON-serializable dict with outcome details.
    """
    # 1) policy
    policy = _parse_simple_yaml(policy_path)
    min_pass_rate = float(policy.get("min_pass_rate", 0.95))
    req_subjects = policy.get("require_subjects", [])
    req_digests = policy.get("require_digests", [])

    # 2) junit
    junit = _junit_summary(junit_path)
    pass_rate = 0.0 if junit["total"] == 0 else junit["passed"] / junit["total"]
    if pass_rate < min_pass_rate:
        return {"ok": False, "changed": False, "reason": f"pass rate {pass_rate:.2%} < required {min_pass_rate:.2%}"}

    # 3) attestations
    if not _verify_attestations(attestation_path, req_subjects, req_digests):
        return {"ok": False, "changed": False, "reason": "required attestations/digests missing"}

    # 4) manifest change
    manifest = _read(manifest_path)
    updated, changed = _replace_image_tag(manifest, image_repo, new_tag)
    if not changed:
        return {"ok": True, "changed": False, "message": "image not found or already up-to-date"}

    # 5) backup + write
    backup = _backup_name(manifest_path)
    _write(backup, manifest)
    if inplace:
        _write(manifest_path, updated)

    return {
        "ok": True,
        "changed": True,
        "backup": backup,
        "manifest_hash": _sha12(updated),
        "new_image_line": f"image: {image_repo}:{new_tag}",
        "pass_rate": round(pass_rate, 4),
    }

# ---------- self-contained demo (safe to keep; delete if not needed) ----------
if __name__ == "__main__":
    # Demo files (kept tiny and local)
    _write("k8s/deploy.yaml", """\
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: demo-app
  template:
    metadata:
      labels:
        app: demo-app
    spec:
      containers:
        - name: app
          image: repo/app:1.2.3
          ports:
            - containerPort: 8080
""")

    _write("policy.yml", """\
min_pass_rate: 0.90
require_subjects:
  - sbom
  - sast
require_digests:
  - sha256:1234deadbeef
""")

    _write("attest.json", json.dumps({
        "subjects": ["sbom", "sast", "sign"],
        "digests": ["sha256:1234deadbeef"]
    }, indent=2))

    # Minimal JUnit with 10 tests, all passing
    junit = ET.Element("testsuite", tests="10", failures="0", errors="0", name="unit")
    ET.ElementTree(junit).write("tests.xml", encoding="utf-8", xml_declaration=True)

    result = promote(
        manifest_path="k8s/deploy.yaml",
        image_repo="repo/app",
        new_tag="2.3.7",
        policy_path="policy.yml",
        attestation_path="attest.json",
        junit_path="tests.xml",
        inplace=True
    )
    print(json.dumps(result, indent=2))
    print("\n--- Updated Manifest ---")
    print(_read("k8s/deploy.yaml"))
    print("\n--- Backups ---")
    for f in sorted(os.listdir("k8s")):
        if ".backup." in f:
            print(" -", f)